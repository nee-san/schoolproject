#!/bin/bash
#
# Written by Ishimoto Shinobu
#
# Also thanks Void Linux and nemasu for required code!
#

umask 022
unalias -a

check_updates() {
	mypkg="$1"

	. $mypkg/Pkgfile

	local i p url sfname lpname bbname githubname rx found_version consider
	local update_override=$mypkg/update
	local original_name=$name

	if [ -r $update_override ]; then
		. $update_override
	fi

	export LC_ALL=C

	homepage="$(cat $mypkg/Pkgfile | grep "^\# URL" | awk '{print $3}')"
	distfiles="${source[@]}"

	if [ -z "$site" ]; then
		printf '%s\n' "$homepage"
		for i in $distfiles; do
			printf '%s\n' "${i%/*}/"
		done
	else
		printf '%s\n' "$site"
	fi |
	while IFS= read -r url; do
		rx=
		if [ -z "$site" ]; then
			case "$url" in
			*sourceforge.net/sourceforge*)
				sfname="$(printf %s "$url" | cut -d/ -f5)"
				url="https://sourceforge.net/projects/$sfname/rss?limit=200";;
			*code.google.com*|*googlecode*)
				url="http://code.google.com/p/$name/downloads/list";;
			*launchpad.net*)
				lpname="$(printf %s "$url" | cut -d/ -f4)"
				url="https://launchpad.net/$lpname/+download";;
			*cpan.*)
				name=${name#perl-};;
			*pythonhosted.org*)
				name=${name#python-}
				url="https://pypi.org/simple/$name";;
			*github.com*)
				githubname="$(printf %s "$url" | cut -d/ -f4,5)"
				url="https://github.com/$githubname/tags"
				rx='/archive/(v?|\Q'"$name"'\E-)?\K[\d\.]+(?=\.tar\.gz")';;
			*gitlab.com*|*gitlab.gnome.org*|*gitlab.freedesktop.org*)
				gitlaburl="$(printf %s "$url" | cut -d/ -f1-5)"
				url="$gitlaburl/tags"
				rx='/archive/[^/]+/\Q'"$name"'\E-v?\K[\d\.]+(?=\.tar\.gz")';;
			*bitbucket.org*)
				bbname="$(printf %s "$url" | cut -d/ -f4,5)"
				url="https://bitbucket.org/$bbname/downloads"
				rx='/(get|downloads)/(v?|\Q'"$name"'\E-)?\K[\d\.]+(?=\.tar)';;
			*kernel.org/pub/linux/kernel/*)
				rx=linux-'\K'${version%.*}'[\d.]+(?=\.tar\.xz)';;
			*cran.r-project.org/src/contrib*)
				rx='\b\Q'"${name#R-cran-}"'\E_\K\d+(\.\d+)*(-\d+)?(?=\.tar)';;
			*download.kde.org/stable/applications*|*download.kde.org/stable/frameworks*|*download.kde.org/stable/plasma*)
				url="${url%%${version%.*}*}"
				rx='href="\K[\d\.]+(?=/")';;
			*rubygems.org*)
				url="https://rubygems.org/gems/${name#ruby-}"
				rx='href="/gems/'${name#ruby-}'/versions/\K[\d\.]*(?=")' ;;
			*ftp.gnome.org*)
				: ${pattern="\Q$name\E-\K[0-9]+\.[0-9]*[02468]\.[0-9.]*[0-9](?=)"}
				url="http://ftp.gnome.org/pub/GNOME/sources/$name/cache.json";;
			esac
		fi

		rx=${pattern:-$rx}
		rx=${rx:-'(?<!-)\b\Q'"$name"'\E[-_]?((src|source)[-_])?\K([^-/_\s]*?\d[^-/_\s]*?)(?=(?:[-_.](?:src|source|orig))?\.(?:[jt]ar|shar|t[bglx]z|tbz2|zip))\b'}

		curl -H 'Accept: text/html,application/xhtml+xml,application/xml,text/plain,application/rss+xml' --max-time 10 -Lsk "$url" |
			grep -Po -i "$rx"
	done |
	tr _ . |
	sort -Vu -r |
	head -n 1 |
	while IFS= read -r found_version; do
		consider=true
		p="$ignore "
		while [ -n "$p" ]; do
			i=${p%% *}
			p=${p#* }
			case "$found_version" in
			$i)
				consider=false
			esac
		done
		if $consider; then
			if [ "$version" != "$found_version" ]; then
				echo "update $name to $found_version"
			fi
		fi
	done
}

for packages in $(ls $REPO); do
	case $packages in
		base-files|sbase|ubase|sinit|autoconf2.13|musl-tools|mkinitrd|db|wireless_tools)
			true
			;;
		*)
			unset name version release site pattern bash_distverbash_patchlevel ignore i p url sfname lpname bbname githubname rx found_version consider update_override original_name
			cd $REPO
			check_updates $packages
			;;
	esac
done

exit 0
